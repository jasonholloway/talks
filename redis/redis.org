* The Wonderful World of Redis
  
- What is it? A database, a cache, or neither?
  - Intro from 7d7w
  - other intros that clash
- The history:
  - in the beginning, memcache
  - One process per request - cgi-bin, like php
  - Antirez's usecase - tuple aggregation
- Is like a collection library
  - hosted in a peer process rather than as objects on the heap
  - instead of clean and simple method dispatch, you've got a tcp protocol
  - Demo of commands
    - sets the scene for later demos

- The further history
  - NoSQL hype
    - turn against integration in db, where SQL has all the perfectly normalised public data of your domain
    - dovetails with microservices, separation of domain into smaller units that can encapsulate complication locally
  - Redis can be used everywhere, for everything!
    - like grease - check out 7d7w date (redis as the culmination of book)
  - extensions, use-cases
    - examples here
  - the rebound
    - examples here
    - Aphyr proves the obvious
- Data loss demo
  - as continuation of rebound

- Sum up positives and negatives
  - good
    - when consistency and durability aren't too important
    - where data is encapsulated - bad for integration with other apps
    - therefore, microservices
    - prototyping
  - gotchas
    - bit cryptic
  
- Making the best of it
  - logging and monitoring
  - data could be asynchronously uploaded to S3?
- Maintenance tips
  - first of all, check connections
    - from the network, from the client, from the server
    - tcp connection exhaustion
    - logging
  - look at infos on both sentinels and servers
    - check masters and slaves

      




- faster writing than reading(?)
- optimized for speed rather than RAM

- originally, used OS fork() to do snapshotting to files
- AOF was added
  
- master->slave async replication


- extension on extension on extension
  - extensions on the inside
    - search
  - extensions on the outside
    - sentinel
    - cluster

- again, as if it's actually a programming environment
  
- single-threaded, good for consistency
  - kinda like Node
  - but the OS is parallelizing loads of stuff underneath
  
- extensions via C (or anything with C bindings)
- Lua acripting ftw
  - all is atomic, transactional
  - script can live in client code
  - show RedisEntityLogs as example
    - predeclare keys so it fetches em upfront






