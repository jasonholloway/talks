*Unix: Valley of the Dinosaurs?*

before Multics, bundles of utilities formed an Operating System - less monolithic
(so Unix was a lapse back to the old way even at its inception)


MULTICS, sponsored by GE, who made a big computer especially for it
(computing as a utility, like a telephone exchange, or electricity, maybe like today's CLOUD)
very modular, within its specialised hardware

Ken Thompson: "overdesigned and overbuilt and over everything. It was close to unusable" (see Seibel)

but FAILURE ensued
UNIX rose from its ashes, only without the tie-in to the hardware



DSLs
Inversion
Port


AT&T big monopolistic monolith
ironically allowed space at periphery to Bell Labs
pootling about, outside of commercial concerns with absent management
interactions mirrored in interctions of little programs (each of which written by different person or small teams of people)

Cutler macho, as counterpoint

Independent from manufacturers, unusually -> porting removes dependency on particular machine
PDP11 modular itself

porting is kind of Dependency Inversion: different machines are adapted to UNIX via C compilers


AT&T monopoly broken up, which brought Bell labs under commercial pressures, team was split up, etc
Unix became an asset, attempt to monetize it
this broke the spell of the product too; sudden rush to replace it with equivalent

Gnu tried to recreate, but with militance against commercialism and focus on rsm - partial success, kernel failure due to overengineering
Linux beat it, despite bodginess, concurrent with WWW, beginning of open source




communication by text - most primitive, but also most expressive

text is all they had

similarly, lack of languages, at least initially, gave impetus for each small program to interpret its own language



UNIX AS MODULAR SYNTHESIZER?!
examples of things that are modular, and not modular
main requirement is composability - ie getting different bits to talk to other bits



historical progression frames entire thing
first demos are of basics
files, pipes, dsls


-------------------------------
visions of future Unix

Rob Pike
Structural Regex - better parsing than per line default
Plan9 plumber, more like bus
9P used in WSL integration
-------------------------------

"t is ironic thatUNIXfiles are uninterpreted byte streams, yet the style of programming that most typ-ifiesUNIXhas  a  fairly  rigid  structure  imposed  on  filesâ€”arrays  of  not-too-long  lines"


-------------

- AWK is even the initials of its programmers! entirely owned by them

----------

ad-hoc line-oriented databases

files of lines

------------------------------------------------------------

Two things at loggerheads (or maybe just in right amounts:
- embedded DSLs into monolithic functions (the language makes the monolith flexible)
- composability of specialised functions via pipes and flies

*Kitchen-sink Swiss-Army-Knife* (pathological case of crap DSL)
vs




** Pipes
	 the real composability of unix progs is in their line-oriented inputs and outputs
	 pipes bring a more efficient and elegant way of using this composability

