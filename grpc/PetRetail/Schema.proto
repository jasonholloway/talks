syntax = "proto3";
option csharp_namespace = "PetRetail";

service PetShop {
  
  rpc BuyParrot (ParrotSpec) returns (Parrot);
  
  rpc OrderCatFood (Amount) returns (stream BoxOfKibbles);
  
  rpc DonateKittens (stream LitterOfKittens) returns (stream CeaseAndDesist);
  
}

enum ParrotBreed {
  AfricanGrey = 0;
  ScarletMacaw = 1;
}

message ParrotSpec {
  int32 age = 1;
  ParrotBreed breed = 2;
}

message Parrot {
  string name = 1;
  int32 price = 2;
  ParrotBreed breed = 3;
}

message LitterOfKittens {
  repeated Kitten kittens = 1;
}

message Kitten {
  string name = 1;
}

message CeaseAndDesist {
  int32 severity = 1;
  string message = 2;
}

message BoxOfKibbles {
  string brand = 1;
  int32 weight = 2;
}

message Amount {
  sint64 amount = 1;
}


//gRPC - the contract is announced up front, then the calls are imperative (like in-process calls)
//REST = the contract is discoverable, and resources are exposed


//gRPC-Web protocol

//integration with AspNetCore

// uses http2 - not supported by IIS or AppServices

// grpc not directly supported by browsers - need to use a special proxy (doable)

// simplifies design issues - REST = bike-shedding, RPC = no fuss

// streaming is first-class-citizen
// step towards reactive architectures

// Grpc has been available on DotNet for yonks, since 2016 in fact

// Distinguish between Grpc and Grpc-Web