* Deconstructors

** Constructors (woo!)
   that's the end of the talk (joke)

*** what does it do? (q)
    it creates an object, an instance of a class
    it sets up the new instance
    via the interfaces you know it implements, you can then interact with it
    
**** encapsulates (behaviour)

***** simply structured args list into black hole

***** and it's one way
      it's the business of the implementing type what it actually does

***** this hides stuff below the contract
      at this point we can wash our hands of it
  
**** packs (data)
     objects as transparent containers

***** in trad C#, this done by properties, branching etc

***** eg result classes

***** transparency, symmetry

***** decayed, degenerated from OO data+behaviour

** C# across the ages

*** with Linq
    new ways of packing

**** anon objects
     not about encapsulation

**** object initializers

**** with prop-based unpacking


*** 2016
**** Tuples!
     is like an args list without the type

**** But also introduced new ways of unpacking data

***** type matching (which is unpacking if you squint)

***** pattern-matching of tuples

****** brilliant symmetry of tuples - so simple and so obvious
       like a pivot to a different way of seeing objects - pack/unpack
       crystal clear

***** Deconstructors

****** tuples desugared
       tuples carry the minimum amount of baggage, purest containers
      
****** demo of desconstructed type pattern matching

** The present/future

*** auto property deconstructuring

**** just syntactical repackaging really

**** but forms symmetrical pair with object initializers
     just like how ctors with an args list tuple get unpacked

*** and finally, records

**** kind of templated data-carrying classes

**** intended to be used with pattern-matching

***** like anon objects v2

**** culmination of data-type story

