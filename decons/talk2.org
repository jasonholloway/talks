# -**- mode: Org; eval: (reveal-mode 1); -**-
# -**- org-image-actual-width: 500; -**-
#+OPTIONS: toc:nil reveal_fragmentinurl:t reveal_totaltime:t
#+REVEAL_ROOT: ./reveal.js
#+REVEAL_INIT_SCRIPT: slideNumber: 'h.v', 
#+REVEAL_INIT_SCRIPT: hash: true, 
#+REVEAL_THEME: sunblind
#+REVEAL_TRANS:None
#+REVEAL_TITLE_SLIDE:
#+REVEAL_EXTRA_CSS:./custom.css
#+REVEAL_EXTRA_CSS:./prism.css
#+REVEAL_EXTRA_CSS:./prismjs-vs/Sources/dist/prism-vs-dark.css
#+REVEAL_EXTRA_CSS:./reveal.js/plugin/reveal-drawer/dist/drawer.css
#+REVEAL_HLEVEL:1
#+REVEAL_PLUGINS: (notes drawer)
#+REVEAL_HEAD_PREAMBLE: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+REVEAL_HEAD_PREAMBLE: <script src="sketch.js/lib/sketch.js"></script>
#+REVEAL_HEAD_PREAMBLE: <script src="dazzleSketch/dazzleSketch.js"></script>
#+REVEAL_EXTRA_SCRIPTS: ("./prism.js" "./prism-setup.js")
#+Title: Deconstructors
#+Description: blah blah blah
* 

#+BEGIN_SRC C#
var thing = new Thing("blah", 123);
#+END_SRC

* Constructors @@html:<span class="mini-exclaim">(woo!)</span>@@
#+BEGIN_SRC C#
var thing = new Thing("blah", 123);
#+END_SRC
#+begin_notes
  that's the end of the talk (joke)

  an args list: the simplest possible construction of values, shoveled in to type constructor
  and you get out, a thing

  the construction does two things, to different degrees

  this is kind of what we get by default, as we're just, as I said, shovelling in this simple list of values into the constructor
  how this type converts these values into the properties and methods it exposes is necessarily up to it, as we've delegated compete control to it
  we're operating entirely on trust
  
  but there's another side to how we expect them to work...

  encapsulation=delegation and packing=trust
#+end_notes

#+ATTR_REVEAL: :frag roll-in
do two things:
    #+ATTR_REVEAL: :frag (roll-in roll-in)
  - encapsulate
  - pack



* ctors /_Encapsulate_/
     #+ATTR_REVEAL: :frag (roll-in roll-in)
   - data is opaquely wrapped
     @@html: <div class="dog-box">@@
     #+begin_src C#
     var dog = new Dog(name: "Bruce", loyalty: 0.37, enthusiasm: 0.76);

     //now parameters are the dog's business...
     #+end_src
     #+ATTR_REVEAL: :frag roll-in
     [[./dog1.jpg]]
     @@html: </div>@@

   - and behaviour is exposed
     @@html: <div class="dog-box">@@
      #+begin_src C#
      var stick = dog.FetchStick();

      //our business is limited to the contract
      #+end_src
     #+ATTR_REVEAL: :frag roll-in
      [[./dog2.jpg]]
     @@html: </div>@@

* ctors /_Pack_/
     #+ATTR_REVEAL: :frag (roll-in roll-in)
   - data is transparently structured
      #+begin_src C#
      class Dog
      {
        public FetchResult FetchStick()
        {
          return new FetchResult(
            success: true,
            stick: new Stick(variety: Wood.Birch, weight: 0.23)
          );
        }
      }
      #+end_src
   - to be unpacked later
      #+begin_src C#
      var fetched = dog.FetchStick();

      if(fetched.Success)
      {
        Write($"Wow, this stick is {fetched.Stick.Weight} kilogrammes in weight!");
      }
      #+end_src

* Illustrative picture
  [[./dogstick.jpg]]


* C# Syntax
    #+ATTR_REVEAL: :frag (roll-in roll-in)
  - C# syntax hasn't /*in the past*/ distinguished between these two ways of thinking about objects.
  - you shovel in, then poke about after using the dot operator @@html:<br />@@(which covers all cases)
    
   #+ATTR_REVEAL: :frag roll-in
    [[./shovel.png]]
    [[./pack.png]]

    #+begin_notes
    shovel-in/poke-about  vs ideal pack/unpack
    #+end_notes


* The rising tide of pack/unpack
 [[./dogsurf.jpg]]

* C#3 Prop-Packing
#+ATTR_REVEAL: :frag roll-in
  - object initializers - set properties directly
    #+begin_src C#
    //caller dictates props
    var meal = new Dinner
    {
      Main = new MeatInGravy(),
      Dessert = new DryBiscuits()
    };
    #+end_src
#+ATTR_REVEAL: :frag roll-in
  - needed by anonymous objects, essential to LINQ
    #+begin_src C#
    return new 
    {
      Decibels = 90,
      Voice = "yapyapyap"
    };
    #+end_src
    
#+begin_notes
because bog-standard ctors _really_ need an implementing type: doesn't fit ad hoc use case
#+end_notes
#+ATTR_REVEAL: :frag roll-in
  - props go in, props come out: symmetry! (kind of)
    #+begin_src C#
    barks
      .Where(x => x.Voice == "yapyapyap")
      .Select(_ => "could be a poodle?");
    #+end_src
#+begin_notes
  - not about encapsulation!
#+end_notes

* C#7 Type-Unpacking

#+begin_notes
- C#5 had been about async - now we're back to syntax...
- nascent symettry...
- type param goes in, type param comes out
#+end_notes
  
    #+ATTR_REVEAL: :frag roll-in
  - allows us to probe the type used to construct the object
    #+ATTR_REVEAL: :frag roll-in
    #+begin_src C#
      if(pet is Dog dog)
      {
        Beckon(dog.Name);
      }
    #+end_src

  #+ATTR_REVEAL: :frag roll-in
    #+begin_src C#
      switch(pet)
      {
        case Dog dog:
          Beckon(dog.Name);
          break;

        case Cat cat:
          PutOutSomeFood();
          WaitForAges();
          break;
      }
    #+end_src
#+ATTR_REVEAL: :frag roll-in
  - types go in, types come out: symmetry!

* C#7 Deconstructors
  
#+ATTR_REVEAL: :frag roll-in
  - allow us to unpack both *type* /and/ *arg list*
#+ATTR_REVEAL: :frag roll-in
    #+begin_src C#
      var pets = new[]
      {
        new Dog("Graham", 13),
        new Cat("Tabitha", Food.Kippers)
      };

      //...

      switch(pet)
      {
        case Dog(var name, _):
          CallOut(name);
          break;

        case Cat("Tabitha", var faveFood):
          PutOutSomeFood(faveFood);
          break;
      }
    #+end_src
#+ATTR_REVEAL: :frag roll-in
  - amazing symmetry achieved!

* C#8 Property-Unpacking
#+ATTR_REVEAL: :frag roll-in
  - mirrors object initializers: props in and props out... @@html: <br/>@@ with /same(ish) syntax/
#+ATTR_REVEAL: :frag roll-in
  #+begin_src C#
      var pets = new object[]
      {
        new Dog { Name = "Bruce", DoesHeel: true }
        new Cat { Name = "Tabitha" }
      };

      //...

      switch(pet)
      {
        case Dog { Name: var name, DoesHeel: true }:
          Beckon(name);
          break;
      }
  #+end_src
#+ATTR_REVEAL: :frag roll-in
  - pinnacle of prop-based symmetry


* The End
  [[./mirror.jpg]]

